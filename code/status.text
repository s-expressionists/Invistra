What is done:

  We have a near-complete implementation of the format function.  What
  is missing is the floating-point printers.  It compiles the string
  and generates primitive output operations, as simple calls to other
  Common Lisp functions if they are available. 

  We have an implementation of the Burger-Dybvig algorithm that we
  plan to use for the floating-point printer operations.  We have 
  tested it against a slower but simpler implementation for all
  single-floats, and the two versions give the same result. 

  We also have an implementation of a very fast algorithm that
  generates floating-point digits using floating-point arithmetic.  
  If a check is added to that algorithm to verify that the result
  would read back in accurately, then this algorithm can be used
  to suggest a fast and accurate way of printing floats.  They
  won't be the shortest possible as is always the case with
  Burger & Dybvig, but some people might not care about that. 

How to test it:

What remains to do:

  Add more tests.  There is a subdirectory Format-tests
  the contents of which should probably me moved here, the files
  renamed (.lsp -> .lisp), and they should be adapted to the
  lisp-unit testing framework.  The system definition should
  include these new files. 

  We need to extend the Burger & Dybvig algorith to print
  fixed-field floats, and we need to integrate the result into
  the implementation of format. 
